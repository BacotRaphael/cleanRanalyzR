independent.variable.type<-types[names(types)==independent.variable]
}else{
independent.variable.type<-NA
}
good_dependent_variables<-names(types)[types %in% c("numerical","numeric","categorical")]
analysisplan<-data.frame(research.question = "RQ: not specified (automatic analysisplan)",
sub.research.question = "sub RQ not specified (automatic analysisplan)",
repeat.for.variable=repeat.for.variable,
independent.variable=independent.variable,
independent.variable.type=independent.variable.type,
dependent.variable=good_dependent_variables,
dependent.variable.type = types[good_dependent_variables],
hypothesis.type = hypothesis.type,
stringsAsFactors = F)
return(analysisplan)
}
debugonce(make_analysisplan_all_vars)
make_analysisplan_all_vars(q)
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$name[which(!is.na(survey[["name"]]))]))
colnames(df)<-survey$name[which(!is.na(survey[["name"]]))]
df<-as.data.frame(df)
View(questionnaire)
View(df)
View(survey)
df<-matrix(NA,0,length(survey$name[which(!is.na(survey[["name"]]))]))
View(survey)
make_analysisplan_all_vars <- function(questionnaire,
repeat.for.variable=NA,
independent.variable = NA,
hypothesis.type = "direct_reporting"){
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$name[which(!is.na(survey[["question.name"]]))]))
colnames(df)<-survey$name[which(!is.na(survey[["question.name"]]))]
df<-as.data.frame(df)
if(!is.data.frame(df)){stop(" df must be a data frame")}
types <- map_to_datatypes(df,questionnaire)
types <- types[!is.na(types)]
if(!is.na(independent.variable)){
if(any(types[names(types)==independent.variable]!="categorical")){stop("independent variable must be categorical (and can not be select_multiple TRUE/FALSE column")}
independent.variable.type<-types[names(types)==independent.variable]
}else{
independent.variable.type<-NA
}
good_dependent_variables<-names(types)[types %in% c("numerical","numeric","categorical")]
analysisplan<-data.frame(research.question = "RQ: not specified (automatic analysisplan)",
sub.research.question = "sub RQ not specified (automatic analysisplan)",
repeat.for.variable=repeat.for.variable,
independent.variable=independent.variable,
independent.variable.type=independent.variable.type,
dependent.variable=good_dependent_variables,
dependent.variable.type = types[good_dependent_variables],
hypothesis.type = hypothesis.type,
stringsAsFactors = F)
return(analysisplan)
}
debugonce(make_analysisplan_all_vars)
make_analysisplan_all_vars(q)
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$name[which(!is.na(survey[["question.name"]]))]))
make_analysisplan_all_vars <- function(questionnaire,
repeat.for.variable=NA,
independent.variable = NA,
hypothesis.type = "direct_reporting"){
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$make_analysisplan_all_vars[which(!is.na(survey[["question.name"]]))]))
colnames(df)<-survey$name[which(!is.na(survey[["question.name"]]))]
df<-as.data.frame(df)
if(!is.data.frame(df)){stop(" df must be a data frame")}
types <- map_to_datatypes(df,questionnaire)
types <- types[!is.na(types)]
if(!is.na(independent.variable)){
if(any(types[names(types)==independent.variable]!="categorical")){stop("independent variable must be categorical (and can not be select_multiple TRUE/FALSE column")}
independent.variable.type<-types[names(types)==independent.variable]
}else{
independent.variable.type<-NA
}
good_dependent_variables<-names(types)[types %in% c("numerical","numeric","categorical")]
analysisplan<-data.frame(research.question = "RQ: not specified (automatic analysisplan)",
sub.research.question = "sub RQ not specified (automatic analysisplan)",
repeat.for.variable=repeat.for.variable,
independent.variable=independent.variable,
independent.variable.type=independent.variable.type,
dependent.variable=good_dependent_variables,
dependent.variable.type = types[good_dependent_variables],
hypothesis.type = hypothesis.type,
stringsAsFactors = F)
return(analysisplan)
}
make_analysisplan_all_vars <- function(questionnaire,
repeat.for.variable=NA,
independent.variable = NA,
hypothesis.type = "direct_reporting"){
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$make_analysisplan_all_vars[which(!is.na(survey[["question.name"]]))]))
colnames(df)<-survey$name[which(!is.na(survey[["question.name"]]))]
df<-as.data.frame(df)
if(!is.data.frame(df)){stop(" df must be a data frame")}
types <- map_to_datatypes(df,questionnaire)
types <- types[!is.na(types)]
if(!is.na(independent.variable)){
if(any(types[names(types)==independent.variable]!="categorical")){stop("independent variable must be categorical (and can not be select_multiple TRUE/FALSE column")}
independent.variable.type<-types[names(types)==independent.variable]
}else{
independent.variable.type<-NA
}
good_dependent_variables<-names(types)[types %in% c("numerical","numeric","categorical")]
analysisplan<-data.frame(research.question = "RQ: not specified (automatic analysisplan)",
sub.research.question = "sub RQ not specified (automatic analysisplan)",
repeat.for.variable=repeat.for.variable,
independent.variable=independent.variable,
independent.variable.type=independent.variable.type,
dependent.variable=good_dependent_variables,
dependent.variable.type = types[good_dependent_variables],
hypothesis.type = hypothesis.type,
stringsAsFactors = F)
return(analysisplan)
}
debugonce(make_analysisplan_all_vars)
make_analysisplan_all_vars(q)
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$make_analysisplan_all_vars[which(!is.na(survey[["question.name"]]))]))
make_analysisplan_all_vars <- function(questionnaire,
repeat.for.variable=NA,
independent.variable = NA,
hypothesis.type = "direct_reporting"){
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$question.name[which(!is.na(survey[["question.name"]]))]))
colnames(df)<-survey$name[which(!is.na(survey[["question.name"]]))]
df<-as.data.frame(df)
if(!is.data.frame(df)){stop(" df must be a data frame")}
types <- map_to_datatypes(df,questionnaire)
types <- types[!is.na(types)]
if(!is.na(independent.variable)){
if(any(types[names(types)==independent.variable]!="categorical")){stop("independent variable must be categorical (and can not be select_multiple TRUE/FALSE column")}
independent.variable.type<-types[names(types)==independent.variable]
}else{
independent.variable.type<-NA
}
good_dependent_variables<-names(types)[types %in% c("numerical","numeric","categorical")]
analysisplan<-data.frame(research.question = "RQ: not specified (automatic analysisplan)",
sub.research.question = "sub RQ not specified (automatic analysisplan)",
repeat.for.variable=repeat.for.variable,
independent.variable=independent.variable,
independent.variable.type=independent.variable.type,
dependent.variable=good_dependent_variables,
dependent.variable.type = types[good_dependent_variables],
hypothesis.type = hypothesis.type,
stringsAsFactors = F)
return(analysisplan)
}
debugonce(make_analysisplan_all_vars)
make_analysisplan_all_vars(q)
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$question.name[which(!is.na(survey[["question.name"]]))]))
survey$question.name
View(survey)
make_analysisplan_all_vars <- function(questionnaire,
repeat.for.variable=NA,
independent.variable = NA,
hypothesis.type = "direct_reporting"){
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$questions.name[which(!is.na(survey[["questions.name"]]))]))
colnames(df)<-survey$name[which(!is.na(survey[["questions.name"]]))]
df<-as.data.frame(df)
if(!is.data.frame(df)){stop(" df must be a data frame")}
types <- map_to_datatypes(df,questionnaire)
types <- types[!is.na(types)]
if(!is.na(independent.variable)){
if(any(types[names(types)==independent.variable]!="categorical")){stop("independent variable must be categorical (and can not be select_multiple TRUE/FALSE column")}
independent.variable.type<-types[names(types)==independent.variable]
}else{
independent.variable.type<-NA
}
good_dependent_variables<-names(types)[types %in% c("numerical","numeric","categorical")]
analysisplan<-data.frame(research.question = "RQ: not specified (automatic analysisplan)",
sub.research.question = "sub RQ not specified (automatic analysisplan)",
repeat.for.variable=repeat.for.variable,
independent.variable=independent.variable,
independent.variable.type=independent.variable.type,
dependent.variable=good_dependent_variables,
dependent.variable.type = types[good_dependent_variables],
hypothesis.type = hypothesis.type,
stringsAsFactors = F)
return(analysisplan)
}
debugonce(make_analysisplan_all_vars)
make_analysisplan_all_vars(q)
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$questions.name[which(!is.na(survey[["questions.name"]]))]))
colnames(df)<-survey$name[which(!is.na(survey[["questions.name"]]))]
df<-as.data.frame(df)
View(df)
survey$questions.name
make_analysisplan_all_vars <- function(questionnaire,
repeat.for.variable=NA,
independent.variable = NA,
hypothesis.type = "direct_reporting"){
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$questions.name[which(!is.na(survey[["questions.name"]]))]))
colnames(df)<-survey$questions.name[which(!is.na(survey[["questions.name"]]))]
df<-as.data.frame(df)
if(!is.data.frame(df)){stop(" df must be a data frame")}
types <- map_to_datatypes(df,questionnaire)
types <- types[!is.na(types)]
if(!is.na(independent.variable)){
if(any(types[names(types)==independent.variable]!="categorical")){stop("independent variable must be categorical (and can not be select_multiple TRUE/FALSE column")}
independent.variable.type<-types[names(types)==independent.variable]
}else{
independent.variable.type<-NA
}
good_dependent_variables<-names(types)[types %in% c("numerical","numeric","categorical")]
analysisplan<-data.frame(research.question = "RQ: not specified (automatic analysisplan)",
sub.research.question = "sub RQ not specified (automatic analysisplan)",
repeat.for.variable=repeat.for.variable,
independent.variable=independent.variable,
independent.variable.type=independent.variable.type,
dependent.variable=good_dependent_variables,
dependent.variable.type = types[good_dependent_variables],
hypothesis.type = hypothesis.type,
stringsAsFactors = F)
return(analysisplan)
}
make_analysisplan_all_vars(q)
rm(list = c(make_analysisplan_all_vars(,map_to_datatypes())))
rm(list = c(make_analysisplan_all_vars,map_to_datatypes))
devtools::load_all()
rm(list = c("make_analysisplan_all_vars", "map_to_datatypes"))
devtools::load_all()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
load_questionnaire_without_data
devtools::load_all()
cleanRanalyzR()
cleanRanalyzR()
debugonce(make_analysisplan_all_vars)
debugonce(load_questionnaire_without_data)
q<-load_questionnaire_without_data(survey,choices,"label::French (fr)")
data_str<-matrix(NA,0,length(survey$name[which(!is.na(survey[["name"]]))]))
colnames(data_str)<-survey$name
data_str<-as.data.frame(data_str)
data_str<-matrix(NA,0,length(survey$name[which(!is.na(survey[["name"]]))]))
colnames(data_str)<-survey$name
survey$name
survey$name[which(!is.na(survey[["name"]]))]
survey$name
survey[["name"]]
survey$name[which(!is.na(survey[["name"]]))]
devtools::load_all()
q<-load_questionnaire_without_data(survey,choices,"label::French (fr)")
debugonce(make_analysisplan_all_vars)
make_analysisplan_all_vars(q)
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$questions.name[which(!is.na(survey[["questions.name"]]))]))
colnames(df)<-survey$questions.name[which(!is.na(survey[["questions.name"]]))]
df<-as.data.frame(df)
types <- map_to_datatypes(df,questionnaire)
types <- types[!is.na(types)]
!is.na(independent.variable)
cleanRanalyzR()
cleanRanalyzR()
cleanRanalyzR()
make_analysisplan_all_vars(q)
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
rsconnect::deployApp(".", "hedi-benmustapha", forceUpdate = T)
rsconnect::deployApp(".", "hedi-benmustapha", forceUpdate = T, launch.browser = F)
rsconnect::deployApp(appDir = ".", account = "hedi-benmustapha", forceUpdate = T, launch.browser = F)
rsconnect::deployApp(appDir = ".", account = "hedi-benmustapha", forceUpdate = T, launch.browser = F)
rsconnect::deployApp(appDir = ".", account = "hedi-benmustapha", forceUpdate = T, launch.browser = F)
rsconnect::deployApp(appDir = ".", account = "hedi-benmustapha", forceUpdate = T, launch.browser = F)
rsconnect::deployApp(appDir = ".", account = "hedi-benmustapha", forceUpdate = T, launch.browser = F)
rsconnect::deployApp(appDir = ".", account = "hedi-benmustapha", forceUpdate = T, launch.browser = F)
rsconnect::deployApp(appDir = ".", account = "hedi-benmustapha", forceUpdate = T, launch.browser = F)
rsconnect::deployApp(appDir = ".", account = "hedi-benmustapha", forceUpdate = T, launch.browser = F)
rsconnect::deployApp(appDir = ".", account = "hedi-benmustapha", forceUpdate = T, launch.browser = F)
duplicated(names(db))
all(duplicated(names(db)))
??all
?base::all
all(c(F,F,F,T))
all(c(T))
all(c(T,T))
all(c(T,F))
usethis::use_description()
devtools::load_all()
devtools::load_all()
cleanRanalyzR()
cleanRanalyzR()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
devtools::load_all()
devtools::load_all()
cleanRanalyzR()
devtools::load_all()
cleanRanalyzR()
rsconnect::deployApp(appDir = ".",account = "hedi-benmustapha",forceUpdate = "T",launch.browser = F)
rsconnect::deployApp(appDir = ".",account = "hedi-benmustapha",forceUpdate = T,launch.browser = F)
17226-79
load_file
rsconnect::deployApp(appDir = ".",account = "hedi-benmustapha",forceUpdate = T)
usethis::use_description()
devtools::load_all()
cleanRanalyzR()
cleanRanalyzR()
koboquest::question_type
q$question_type
q$question_type_from_questionnaire
koboquest:::question_type_from_questionnaire
devtools::load_all()
cleanRanalyzR()
rsconnect::deployApp(appDir = ".",account = "hedi-benmustapha",forceUpdate = T)
survey$type[which(survey$name=="ic_age")]
survey$type[which(survey$name=="ic_age")]<-"decimal"
q<-load_questionnaire_without_data(survey = survey,choices = choices,choices.label.column.to.use = "label::French (fr)")
q$question_type(variable.name = "ic_age")
q$question_type(variable.name = "ic_age",data = db)
q$question_type(variable.name = "ic_age",data = db,from.questionnaire = T,from.data = T)
db <- read.csv("C:/Users/Admin/Desktop/Nouveau dossier/xml3f.csv")
View(db)
q$question_type(variable.name = "ic_age")
q$question_type(variable.name = "ic_age",data = db,from.questionnaire = T,from.data = T)
debugonce(make_analysisplan_all_vars)
make_analysisplan_all_vars(questionnaire = load_questionnaire_without_data(survey = survey,choices = choices,choices.label.column.to.use = "label::French (fr)"))
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$questions.name[which(!is.na(survey[["questions.name"]]))]))
colnames(df)<-survey$questions.name[which(!is.na(survey[["questions.name"]]))]
df<-as.data.frame(df)
!is.data.frame(df)){stop(" df must be a data frame")
!is.data.frame(df)){stop(" df must be a data frame"
!is.data.frame(df)
types <- map_to_datatypes(df,questionnaire)
types
debugonce(map_to_datatypes)
types <- map_to_datatypes(df,questionnaire)
types <- sapply(names(df),questionnaire$question_type,
from.questionnaire = T,
from.data = T,
data = df)
types
questionnaire$raw_questionnaire
questionnaire$raw_questionnaire()[1]
questionnaire$raw_questionnaire()[1]%>% head(20)
questionnaire$raw_questionnaire()[1][,1:2]
questionnaire$raw_questionnaire()[1] %>% as.data.frame() %>% head(20)
questionnaire$question_type(variable.name = "ic_age",data = df,from.questionnaire = T,from.data = T)
debugonce(questionnaire$question_type)
questionnaire$question_type(variable.name = "ic_age",data = df,from.questionnaire = T,from.data = T)
from.questionnaire & is_questionnaire_loaded()
question_in_questionnaire(variable.name)
question_type_from_questionnaire(variable.name)
!is.na(type.from.q)
type.from.q <- question_type_from_questionnaire(variable.name)
!is.na(type.from.q)
debugonce(question_type_from_questionnaire)
type.from.q <-
)
question_type_from_questionnaire(variable.name)
variable_types <- as.vector(sapply(variables, function(x) {
if (question_is_select_multiple(x)) {
return("select_multiple")
}
if (question_is_select_one(x)) {
return("select_one")
}
if (question_is_numeric(x)) {
return("numeric")
}
return(NA)
}))
question_is_select_multiple(x)
x<-"ic_age"
question_is_select_multiple(x)
question_is_select_one(x)
question_is_numeric(x)
debugonce(question_is_numeric)
question_is_numeric(x)
x
debugonce(question_is_numeric)
question_is_numeric(x)
question.name <- to_alphanumeric_lowercase(question.name)
question.name
question.name <- to_alphanumeric_lowercase(question.name)
which(questions$name == question.name)
questions$name
qid
qid <- which(questions$name == question.name)
qid
grep("integer", questions$type[qid])
grep("decimal",
questions$typep[qid])
questions$typep[qid]
questions$typep
q$question_type(variable.name = "ic_age",data = db,from.questionnaire = T,from.data = T)
View(survey)
debugonce(koboquest::question_type)
make_analysisplan_all_vars(questionnaire = load_questionnaire_without_data(survey = survey,choices = choices,choices.label.column.to.use = "label::French (fr)"))
debugonce(make_analysisplan_all_vars)
make_analysisplan_all_vars(questionnaire = load_questionnaire_without_data(survey = survey,choices = choices,choices.label.column.to.use = "label::French (fr)"))
survey<-questionnaire$raw_questionnaire()[1] %>% as.data.frame()
df<-matrix(NA,0,length(survey$questions.name[which(!is.na(survey[["questions.name"]]))]))
colnames(df)<-survey$questions.name[which(!is.na(survey[["questions.name"]]))]
df<-as.data.frame(df)
debugonce(map_to_datatypes)
types <- map_to_datatypes(df,questionnaire)
debugonce(questionnaire$question_type)
types <- sapply(names(df),questionnaire$question_type,
from.questionnaire = T,
from.data = T,
data = df)
variable.name
variable.name<-"ic_age"
variable.name <- to_alphanumeric_lowercase(as.character(variable.name))
from.questionnaire & is_questionnaire_loaded()
question_in_questionnaire(variable.name)
question_type_from_questionnaire(variable.name)
debugonce(question_type_from_questionnaire)
question_type_from_questionnaire(variable.name)
variables
x<-variables
question_is_select_multiple(x)
question_is_select_one(x)
question_is_numeric(x)
debugonce(question_is_numeric)
question_is_numeric(x)
question.name <- to_alphanumeric_lowercase(question.name)
question.name
question.name <- to_alphanumeric_lowercase(question.name)
questions$name
qid <- which(questions$name == question.name)
questions
qid
length(c(grep("integer", questions$type[qid]), grep("decimal",
questions$typep[qid]), grep("calculate", questions$type[qid]))) >
0
grep("integer", questions$type[qid])
questions$type[qid]
grep("decimal",
questions$typep[qid]
)
questions$typep[qid]
questions$type[qid]
devtools::package_info("koboquest")
devtools::install_github("hedibmustapha/koboquest")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
devtools::install_github("hedibmustapha/koboquest")
library(koboquest)
rm(list = ls())
devtools::load_all()
usethis::use_description()
devtools::load_all()
detach("package:koboquest", unload = TRUE)
devtools::install_github("hedibmustapha/koboquest")
devtools::install_github("hedibmustapha/koboquest",force = T)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("hedibmustapha/koboquest",force = T)
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
devtools::install_github("hedibmustapha/koboquest",force = T)
library(dplyr)
install.packages("rlang")
library(dplyr)
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
devtools::install_github("hedibmustapha/koboquest")
library(koboquest)
koboquest:::question_type
koboquest:::question_is_numeric
koboquest:::question_is_numeric_internal
devtools::load_all()
cleanRanalyzR()
rsconnect::deployApp(appDir = ".",account = "hedi-benmustapha", forceUpdate = T)
rsconnect::deployApp(appDir = ".",account = "hedi-benmustapha", forceUpdate = T)
